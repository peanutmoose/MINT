% Close all figures, clear variables, and clear command window
close all;
clear all;
clc;
delete(instrfindall); % it is a good practice that we call this

% These values are specific to the Cyton board
start_ch = char('b'); % start stream character
reset_ch = char('v'); % reset character
end_ch = char('s'); % end stream character
packet_bytes = 33; % number of packet bytes
gain = 0.02235 * 10^(-6); % default gain volt/per count

% Set the main parameters
InputBufferSize = packet_bytes * 2000 * 100; % arbitrary
Timeout = 1;

% Create serial object for Cyton board
cython = serial('/dev/cu.usbserial-DM01N59D', 'BaudRate', 115200, 'DataBits', 8);
set(cython, 'InputBufferSize', InputBufferSize);
set(cython, 'Timeout', Timeout);

% Open the communication port
fopen(cython);
fwrite(cython, reset_ch, 'uchar'); % Reset the Cyton board
pause(0.5); % Allow the board to reset

% Read until '$$$' is sent indicating the board is ready
temp = fread(cython, 3);
while (sum(temp(end-2:end)) ~= 108)
    temp = [temp; fread(cython, 3)];
end

% Start the communication
fwrite(cython, start_ch, 'uchar');

% Initialize arrays to store voltage and converted signal
avg_voltage = zeros(1, 1000); % Store average voltage here
converted_signal = zeros(1, 1000); % Store converted signal here (will be adjusted)

% Data collection and processing loop
for j = 1:1000
    sum_outer = 0;
    for k = 1:50
        temp = fread(cython, packet_bytes);
        % Extract EEG channel data
        test1 = temp(3);
        test2 = temp(4);
        test3 = temp(5);
        D1 = de2bi(test1, 8, 'left-msb');
        D2 = de2bi(test2, 8, 'left-msb');
        D3 = de2bi(test3, 8, 'left-msb');
        D = [D1, D2, D3];

        % Convert to decimal using 2's complement
        sum = D(1) == 1 ? -1 * 2^(23) : 0;
        for i = 1:23
            sum = sum + D(i + 1) * 2^(23 - i);
        end
        voltage = gain * sum;
        sum_outer = sum_outer + voltage;
    end

    avg_voltage(j) = sum_outer / 100; % Calculate average voltage
end

% Plot the average voltage
subplot(5, 1, 1);
plot(100 * avg_voltage);
title('Raw EEG Signal');

% Detrending the data
detrended_data = detrend(avg_voltage);
subplot(5, 1, 2);
plot(100 * detrended_data);
title('De-Trended Signal');

% Apply moving average filter
moving_average_signal = movmean(detrended_data, 2);
subplot(5, 1, 3);
plot(moving_average_signal);
title('After Moving Average Filter');

% Apply moving variance filter
moving_variance_filter = movvar(moving_average_signal, 2);
subplot(5, 1, 4);
plot(10 * moving_variance_filter);
title('After Moving Variance Filter');

% Calculate dynamic threshold for peak detection
mean_mvVar = mean(moving_variance_filter);
std_mvVar = std(moving_variance_filter);
N = 3; % Adjust based on signal characteristics
dynamicThreshold = mean_mvVar + N * std_mvVar;

% Convert signal above dynamic threshold to 1, else 0
for j = 1:length(moving_variance_filter)
    if moving_variance_filter(j) < dynamicThreshold
        converted_signal(j) = 0;
    else
        converted_signal(j) = 1;
    end
end

subplot(5, 1, 5);
plot(converted_signal);
title('Converted to 0s and 1s based on Dynamic Threshold');

% Finish the communication
fwrite(cython, end_ch, 'uchar');
fclose(cython); % Close serial port
